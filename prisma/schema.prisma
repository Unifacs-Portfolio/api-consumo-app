generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model usuarios {
  id                String  @id @default(uuid())
  email             String  @unique
  senha             String
  nome              String
  telefone          String
  nivel_consciencia String
  is_monitor        Boolean
  tokens            String
  foto_usuario      String

  dicas                dicas[]
  dicas_verificadas    dicas[]    @relation("VerificadorDica")
  receitas             receitas[]
  receitas_verificadas receitas[] @relation("VerificadorReceita")
}

model temas {
  id        String @id @default(uuid())
  nome      String @unique
  descricao String

  dicas    dicas[]
  receitas receitas[]
  subtemas subtemas[]
}

model subtemas {
  id        String @id @default(uuid())
  tema_id   String
  nome      String
  descricao String

  tema              temas               @relation(fields: [tema_id], references: [id], onUpdate: Cascade, onDelete: Restrict)
  receitas_subtemas receitas_subtemas[]
  dicas_subtemas    dicas_subtemas[]

  @@unique([tema_id, nome])
}

model receitas {
  id             String   @id @default(uuid())
  tema_id        String
  titulo         String
  conteudo       String
  is_verify      Boolean
  usuario_id     String
  verify_by      String?
  data_criacao   DateTime @default(now())
  data_alteracao DateTime @updatedAt
  image_source   String

  tema              temas               @relation(fields: [tema_id], references: [id], onUpdate: Cascade, onDelete: Restrict)
  usuario           usuarios            @relation(fields: [usuario_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  verify_by_user    usuarios?           @relation("VerificadorReceita", fields: [verify_by], references: [id], onUpdate: Cascade, onDelete: SetNull)
  ingredientes      ingredientes[]
  receitas_subtemas receitas_subtemas[]
}

model ingredientes {
  id         String @id @default(uuid())
  receita_id String
  quantidade String
  medida     String
  nome       String

  receita receitas @relation(fields: [receita_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model dicas {
  id                       String   @id @default(uuid())
  usuario_id               String
  tema_id                  String
  titulo                   String
  conteudo                 String
  is_verify                Boolean
  verify_by                String?
  is_created_by_specialist Boolean
  data_criacao             DateTime @default(now())
  data_alteracao           DateTime @updatedAt

  usuario        usuarios         @relation(fields: [usuario_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tema           temas            @relation(fields: [tema_id], references: [id], onUpdate: Cascade, onDelete: Restrict)
  verify_by_user usuarios?        @relation("VerificadorDica", fields: [verify_by], references: [id], onUpdate: Cascade, onDelete: SetNull)
  dicas_subtemas dicas_subtemas[]
}

model receitas_subtemas {
  receita_id String
  subtema_id String
  assunto    String

  receita receitas @relation(fields: [receita_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  subtema subtemas @relation(fields: [subtema_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([receita_id, subtema_id])
}

model dicas_subtemas {
  dica_id    String
  subtema_id String
  assunto    String

  dica    dicas    @relation(fields: [dica_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  subtema subtemas @relation(fields: [subtema_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([dica_id, subtema_id])
}

model quizes {
  id                  String @id @default(uuid())
  pergunta            String
  resposta_verdadeira String
  ordem               Int
  app                 String
  titulo              String
  descricao           String
}
